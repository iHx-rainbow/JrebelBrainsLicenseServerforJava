# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Push Docker Image

on:
  push:
    branches: [ "master" ]
    # # 指定路径或者文件，当此路径下的文件发生变化时，执行此 action
    # paths:
    #   - 'index.html'
    # # 发布 tag 时执行此 action
    # tags:
    #   - 'v*'
    
  pull_request:
    branches: [ "master" ]

  release:
      types:
          - published

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    # platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
    image: ihxrainbow/jrebel-license-server
    tag: latest

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # - name: Build the Docker image
    #   # run: docker build . --file Dockerfile --tag ihxrainbow/jrebel-license-server:$(date +%s)
    #   run: docker build . --file Dockerfile --tag ihxrainbow/jrebel-license-server:latest 

    # - name: Login to Docker Hub
    #   run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
    
    # - name: Push Docker image
    #   run: docker push ihxrainbow/jrebel-license-server:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v5
      # if: github.event_name != 'latest'
      with:
          context: .
          push: true
          tags: ${{ env.image }}:${{ env.tag }}
          # platforms: ${{ env.platforms }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max